package <%=entity.package%>.service.dto;

import java.io.Serializable;
import java.time.Instant;
import java.util.List;
import java.util.Objects;

import lombok.Getter;
import lombok.Setter;

<% for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
import mx.conacyt.crip.ms.proyectos.service.dto.<%= relationship.to.name.pascalCase%>DTO;
<% } -%>

/**
 * A <%=entity.name.pascalCase%>.
 */
@Getter
@Setter
public class <%=entity.name.pascalCase%>DTO implements Serializable {

  private static final long serialVersionUID = 1L;

<% if (!entity.isEmbedded) { -%>
  private String id;
<% } -%>
<%_ entity.properties.forEach(property => { _%>
<%_ if (property.multiplicidad === 'many') { _%>
  private List<<%= property.backEndType%>> <%= property.camelCase %>;
<%_} else { _%>
  private <%= property.backEndType%> <%= property.camelCase %>;
<%_ } _%>
<%_ }); -%>
<% for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
  private List<<%= relationship.to.name.pascalCase%>DTO> <%= relationship.name.camelCase%>;
<% } -%>

  // jhipster-needle-entity-add-field - JHipster will add fields hereetters and setters here

  @Override
  public boolean equals(Object o) {
      if (this == o) {
          return true;
      }
      if (!(o instanceof <%=entity.name.pascalCase%>DTO)) {
          return false;
      }
<%_ if (entity.isEmbedded) { _%>
      return false;
<%_ } else { _%>
      return id != null && id.equals(((<%=entity.name.pascalCase%>DTO) o).id);
<%_ } _%>
  }

  @Override
  public int hashCode() {
<%_ if (entity.isEmbedded) { _%>
    return getClass().hashCode();
  <%_ } else { _%>
    return Objects.hash(this.id);
<%_ } _%>
  }

  // prettier-ignore
  @Override
  public String toString() {
      return "<%=entity.name.pascalCase%>{" +
<% if (!entity.isEmbedded) { -%>
        "id=" + getId() +
<% } -%>
      <%_ entity.properties.forEach(property => { _%>
        ", <%= property.camelCase%>='" + get<%= property.pascalCase%>() + "'" +
        <%_ }); _%>
      "}";
  }
}
