<% for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
import { I<%=relationship.to.name.pascalCase%> } from '@/shared/model/proyectosMs/<%= relationship.to.name.dashCase _%> .model';
<% } -%>

export interface I<%=entity.name.pascalCase%> {
<% if (!entity.isEmbedded) { -%>
  id?: string;
<% } -%>
<%_ entity.properties.forEach(property => { _%>
  <%= property.camelCase%>?: <%= property.frontEndType%> | null;
<%_ }); _%>
<% for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
  <%= relationship.name.camelCase %>?: I<%=relationship.to.name.pascalCase%>[] | null;
<% } -%>
}

export class <%=entity.name.pascalCase%> implements I<%=entity.name.pascalCase%> {
  constructor(
<% if (!entity.isEmbedded) { -%>
    public id?: string,
<% } -%>
    <%_ entity.properties.forEach(property => { _%>
    public <%= property.camelCase%>?: <%= property.frontEndType%> | null,
    <%_ }); _%>
    <%_ for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
    public <%= relationship.name.camelCase %>?: I<%=relationship.to.name.pascalCase%>[] | null,
    <%_ } -%>
  ) {
    <%_ for( relationship of entity.relationships.filter(relationship => relationship.type == 'oneToMany' || relationship.type == 'oneToOne')) { -%>
    this.<%= relationship.name.camelCase%> = this.<%= relationship.name.camelCase%> ? this.<%= relationship.name.camelCase%> : [];
    <%_ } -%>
  }
}
